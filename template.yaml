# AWSTemplateFormatVersion: '2010-09-09'
# Description: Simple Hello World Lambda API with CI/CD

# Parameters:
#   GitHubRepo:
#     Type: String
#   GitHubOwner:
#     Type: String
#   GitHubBranch:
#     Type: String
#   GitHubOAuthToken:
#     Type: String
#     NoEcho: true
#   LambdaCodeKey:
#     Type: String
#   LambdaBucketName:
#     Type: String

# Resources:

#   HelloFunctionRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: HelloLambdaExecutionRole
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: lambda.amazonaws.com
#             Action: sts:AssumeRole
#       Policies:
#         - PolicyName: LambdaBasicExecution
#           PolicyDocument:
#             Version: '2012-10-17'
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - logs:CreateLogGroup
#                   - logs:CreateLogStream
#                   - logs:PutLogEvents
#                 Resource: "*"

#   HelloFunction:
#     Type: AWS::Lambda::Function
#     Properties:
#       FunctionName: HelloWorldFunction
#       Handler: lambda/app.lambda_handler
#       Runtime: python3.11
#       Role: !GetAtt HelloFunctionRole.Arn
#       Code:
#         S3Bucket: !Ref LambdaBucketName
#         S3Key: !Ref LambdaCodeKey

#   ApiGateway:
#     Type: AWS::ApiGateway::RestApi
#     Properties:
#       Name: HelloApi

#   ApiResource:
#     Type: AWS::ApiGateway::Resource
#     Properties:
#       RestApiId: !Ref ApiGateway
#       ParentId: !GetAtt ApiGateway.RootResourceId
#       PathPart: hello

#   ApiMethod:
#     Type: AWS::ApiGateway::Method
#     Properties:
#       AuthorizationType: NONE
#       HttpMethod: GET
#       ResourceId: !Ref ApiResource
#       RestApiId: !Ref ApiGateway
#       Integration:
#         Type: AWS_PROXY
#         IntegrationHttpMethod: POST
#         Uri: !Sub
#           - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
#           - { Region: !Ref "AWS::Region", LambdaArn: !GetAtt HelloFunction.Arn }

#   ApiDeployment:
#     Type: AWS::ApiGateway::Deployment
#     DependsOn: ApiMethod
#     Properties:
#       RestApiId: !Ref ApiGateway
#       StageName: Prod

#   LambdaPermission:
#     Type: AWS::Lambda::Permission
#     Properties:
#       FunctionName: !Ref HelloFunction
#       Action: lambda:InvokeFunction
#       Principal: apigateway.amazonaws.com
#       SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/hello

#   CodePipelineRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: HelloWorldPipelineRole
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: codepipeline.amazonaws.com
#             Action: sts:AssumeRole
#       Policies:
#         - PolicyName: CodePipelineAccess
#           PolicyDocument:
#             Version: '2012-10-17'
#             Statement:
#               - Effect: Allow
#                 Action: "*"
#                 Resource: "*"

#   CodeBuildRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: HelloWorldCodeBuildRole
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: codebuild.amazonaws.com
#             Action: sts:AssumeRole
#       Policies:
#         - PolicyName: CodeBuildAccess
#           PolicyDocument:
#             Version: '2012-10-17'
#             Statement:
#               - Effect: Allow
#                 Action: "*"
#                 Resource: "*"

#   CodeBuildProject:
#     Type: AWS::CodeBuild::Project
#     Properties:
#       Name: HelloLambdaBuild
#       Source:
#         Type: CODEPIPELINE
#       Environment:
#         ComputeType: BUILD_GENERAL1_SMALL
#         Image: aws/codebuild/standard:7.0
#         Type: LINUX_CONTAINER
#       ServiceRole: !GetAtt CodeBuildRole.Arn
#       Artifacts:
#         Type: CODEPIPELINE

#   Pipeline:
#     Type: AWS::CodePipeline::Pipeline
#     Properties:
#       RoleArn: !GetAtt CodePipelineRole.Arn
#       ArtifactStore:
#         Type: S3
#         Location: !Ref LambdaBucketName
#       Stages:
#         - Name: Source
#           Actions:
#             - Name: SourceAction
#               ActionTypeId:
#                 Category: Source
#                 Owner: ThirdParty
#                 Provider: GitHub
#                 Version: 1
#               OutputArtifacts:
#                 - Name: SourceOutput
#               Configuration:
#                 Owner: !Ref GitHubOwner
#                 Repo: !Ref GitHubRepo
#                 Branch: !Ref GitHubBranch
#                 OAuthToken: !Ref GitHubOAuthToken
#               RunOrder: 1
#         - Name: Build
#           Actions:
#             - Name: BuildAction
#               ActionTypeId:
#                 Category: Build
#                 Owner: AWS
#                 Provider: CodeBuild
#                 Version: 1
#               InputArtifacts:
#                 - Name: SourceOutput
#               OutputArtifacts:
#                 - Name: BuildOutput
#               Configuration:
#                 ProjectName: !Ref CodeBuildProject

# Outputs:
#   ApiUrl:
#     Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello"


AWSTemplateFormatVersion: '2010-09-09'
Description: Simple Hello World Lambda API with CI/CD

Parameters:
  GitHubRepo:
    Type: String
  GitHubOwner:
    Type: String
  GitHubBranch:
    Type: String
  GitHubOAuthToken:
    Type: String
    NoEcho: true
  LambdaCodeKey:
    Type: String
  LambdaBucketName:
    Type: String

Resources:

  HelloFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: HelloLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  HelloFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: HelloWorldFunction
      Handler: lambda/app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt HelloFunctionRole.Arn
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: !Ref LambdaCodeKey

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: HelloApi

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: hello

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ApiResource
      RestApiId: !Ref ApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { Region: !Ref "AWS::Region", LambdaArn: !GetAtt HelloFunction.Arn }

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: Prod

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HelloFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/hello

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: HelloWorldPipelineRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: HelloWorldCodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: HelloLambdaBuild
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE

  CloudFormationDeployActionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudFormationDeployActionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt CodePipelineRole.Arn
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CFNDeployPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref LambdaBucketName
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: DeployWithCloudFormation
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                StackName: HelloWorldStack
                Capabilities: CAPABILITY_IAM
                TemplatePath: BuildOutput::template.yaml
                ParameterOverrides: !Sub |
                  {
                    "LambdaCodeKey": "${LambdaCodeKey}",
                    "LambdaBucketName": "${LambdaBucketName}"
                  }
              RoleArn: !GetAtt CloudFormationDeployActionRole.Arn


Outputs:
  ApiUrl:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello"
